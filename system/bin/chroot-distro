#!/system/bin/sh
#Credit: @YasserNull
#Improved by @CHIZI-0618

export PATH="$PATH:/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin"

chroot_distro_path="/data/local/chroot-distro"

log() {
  case $1 in
    red)
      echo -e "\033[1;31m$2\033[0m"
      ;;
    green)
      echo -e "\033[1;32m$2\033[0m"
      ;;
    yellow)
      echo -e "\033[1;33m$2\033[0m"
      ;;
    *)
      echo -e "\033[1;30m$2\033[0m"
      ;;
  esac
}

chroot_distro_check() {
  if [ "$(whoami)" != "root" ]; then
    log red "Root access required"
    exit 1
  fi

  mkdir -p "$chroot_distro_path/"
  mkdir -p "$chroot_distro_path/busybox/"
  mkdir -p "$chroot_distro_path/.rootfs/"
  mkdir -p "$chroot_distro_path/.backup/"

  if [ "$(ls $chroot_distro_path/busybox | wc -w)" = "0" ]; then
    busybox --install -s "$chroot_distro_path/busybox/"
    log green "Busybox installed"
  fi
  export PATH="$chroot_distro_path/busybox:$PATH"

  arch=$(uname -m)
  case "$arch" in
    aarch64 | arm64)
      hardware_machine="arm64"
      ;;
    arm | armel | armhf | armhfp | armv7 | armv7l | armv7a | armv8l)
      hardware_machine="armhf"
      ;;
    386 | i386 | i686 | x86)
      hardware_machine="i386"
      ;;
    amd64 | x86_64)
      hardware_machine="amd64"
      ;;
    *)
      log red "Unsupported machine hardware: $arch"
      exit 1
      ;;
  esac
}

chroot_distro_check

chroot_distro_available() {
  case "$1" in
    alpine | archlinux | artix | debian | deepin | fedora | manjaro | openkylin | opensuse | pardus | ubuntu | void | kali | parrot | backbox | centos | centos_stream)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

chroot_distro_help() {
  echo "chroot-distro: install linux distributions\n
usage :\n
chroot-distro help - for more information
chroot-distro list - list of available linux distributions
chroot-distro download <distro> - download rootfs
chroot-distro redownload <distro> - redownload rootfs
chroot-distro delete <distro> - delete rootfs
chroot-distro install <distro> - install distro
chroot-distro reinstall <distro> - reinstall distro
chroot-distro uninstall <distro> - uninstall distro
chroot-distro backup <distro> - backup distro
chroot-distro backup <distro> <path> - backup distro with custom path
chroot-distro unbackup <distro> - delete backup
chroot-distro restore <distro> - restore distro
chroot-distro restore <distro> <path> - restore distro with custom path
chroot-distro command <distro> <command> - run command
chroot-distro login <distro> - login to distro\n"
}

chroot_distro_list_() {
  if [ -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
    log green "Downloaded: Yes"
  else
    log red "Downloaded: No"
  fi

  if [ -d "$chroot_distro_path/$1/" ]; then
    log green "Installed: Yes"
  else
    log red "Installed: No"
  fi

  if [ -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
    log green "Backup: Yes\n"
  else
    log red "Backup: No\n"
  fi
}

chroot_distro_list() {
  echo "Ubuntu: ubuntu
Rootfs: https://cdimage.ubuntu.com/ubuntu-base/releases/"
  chroot_distro_list_ ubuntu

  echo "Kali Linux: kali
Rootfs: http://kali.download/nethunter-images/"
  chroot_distro_list_ kali

  echo "Debian: debian
Rootfs: https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Debian/
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.7.0/"
  chroot_distro_list_ debian

  echo "Parrot OS: parrot
Rootfs: https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Parrot/"
  chroot_distro_list_ parrot

  echo "Alpine: alpine
Rootfs: http://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/"
  chroot_distro_list_ alpine

  echo "Void Linux: void
Rootfs: https://repo-default.voidlinux.org/live/"
  chroot_distro_list_ void

  if [ "$hardware_machine" != "i386" ]; then
    echo "Arch Linux: archlinux
Rootfs: http://ca.us.mirror.archlinuxarm.org/os/
Rootfs: https://mirrors.ocf.berkeley.edu/archlinux/iso/latest/"
    chroot_distro_list_ archlinux
  fi

  if [ "$hardware_machine" = "arm64" ]; then
    echo "Artix Linux: artix
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.6.0/"
    chroot_distro_list_ artix
  fi

  if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
    echo "Deepin: deepin
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.6.0/"
    chroot_distro_list_ deepin
  fi

  if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
    echo "Fedora: fedora
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.6.0/"
    chroot_distro_list_ fedora
  fi

  if [ "$hardware_machine" = "arm64" ]; then
    echo "Manjaro: manjaro
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.6.0/"
    chroot_distro_list_ manjaro
  fi

  if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
    echo "OpenKylin: openkylin
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.6.0/"
    chroot_distro_list_ openkylin
  fi

  if [ "$hardware_machine" != "armhf" ]; then
    echo "Pardus: pardus
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.6.0/"
    chroot_distro_list_ pardus
  fi

  echo "OpenSuse: opensuse
Rootfs: https://github.com/termux/proot-distro/releases/download/v4.6.0/"
  chroot_distro_list_ opensuse

  echo "BackBox: backbox
Rootfs: https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/BackBox/"
  chroot_distro_list_ backbox

  if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
    echo "CentOS: centos
Rootfs: https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS/"
    chroot_distro_list_ centos
  fi

  if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
    echo "CentOS Stream: centos_stream
Rootfs: https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS_Stream/"
    chroot_distro_list_ centos_stream
  fi
}

chroot_distro_download() {
  if [ "$1" = "ubuntu" ]; then
    echo "[1] ubuntu trusty 14.04.6"
    echo "[2] ubuntu xenial 16.04.6"
    echo "[3] ubuntu bionic 18.04.5"
    if [ "$hardware_machine" != "i386" ]; then
      echo "[4] ubuntu focal 20.04.5"
      echo "[5] ubuntu jammy 22.04.4"
      echo "[6] ubuntu mantic 23.10"
      echo "[7] ubuntu noble 24.04"
    fi

    while true; do
      printf "Enter a number: "
      read number
      case "$number" in
        1)
          rootfs="trusty"
          rootfs_version="14.04.6"
          break
          ;;
        2)
          rootfs="xenial"
          rootfs_version="16.04.6"
          break
          ;;
        3)
          rootfs="bionic"
          rootfs_version="18.04.5"
          break
          ;;
        4)
          rootfs="focal"
          rootfs_version="20.04.5"
          break
          ;;
        5)
          rootfs="jammy"
          rootfs_version="22.04.4"
          break
          ;;
        6)
          rootfs="mantic"
          rootfs_version="23.10"
          break
          ;;
        7)
          rootfs="noble"
          rootfs_version="24.04"
          break
          ;;
        *) log red "Unknown option: $number" ;;
      esac
    done
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://cdimage.ubuntu.com/ubuntu-base/releases/$rootfs/release/ubuntu-base-$rootfs_version-base-$hardware_machine.tar.gz"
      if [ $? -ne 0 ]; then
        log red "Failed to download the Ubuntu Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "alpine" ]; then
    echo "[1] alpine minirootfs 3.19.0"
    echo "[2] alpine netboot 3.19.0"
    echo "[3] alpine rpi 3.19.0"
    echo "[4] alpine uboot 3.19.0"

    while true; do
      printf "Enter a number: "
      read number
      case "$number" in
        1)
          rootfs="minirootfs"
          break
          ;;
        2)
          rootfs="netboot"
          break
          ;;
        3)
          rootfs="rpi"
          break
          ;;
        4)
          rootfs="uboot"
          break
          ;;
        *) log red "Unknown option: $number" ;;
      esac
    done
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/x86/g)/alpine-$rootfs-3.19.0-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/x86/g).tar.gz"
      if [ $? -ne 0 ]; then
        log red "Failed to download the Alpine Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "kali" ]; then
    echo "[1] kali linux full 2024.1"
    echo "[2] kali linux minimal 2024.1"
    echo "[3] kali linux nano 2024.1"
    echo "[4] kali linux full 2023.4"
    echo "[5] kali linux minimal 2023.4"
    echo "[6] kali linux nano 2023.4"
    echo "[7] kali linux full 2023.3b"
    echo "[8] kali linux minimal 2023.3b"
    echo "[9] kali linux nano 2023.3b"
    echo "[10] kali linux full 2023.3"
    echo "[11] kali linux minimal 2023.3"
    echo "[12] kali linux nano 2023.3"
    echo "[13] kali linux full current"
    echo "[14] kali linux minimal current"
    echo "[15] kali linux nano current"

    while true; do
      printf "Enter a number: "
      read number
      case "$number" in
        1)
          rootfs="full"
          rootfs_version="kali-2024.1"
          break
          ;;
        2)
          rootfs="minimal"
          rootfs_version="kali-2024.1"
          break
          ;;
        3)
          rootfs="nano"
          rootfs_version="kali-2024.1"
          break
          ;;
        4)
          rootfs="full"
          rootfs_version="kali-2023.4"
          break
          ;;
        5)
          rootfs="minimal"
          rootfs_version="kali-2023.4"
          break
          ;;
        6)
          rootfs="nano"
          rootfs_version="kali-2023.4"
          break
          ;;
        7)
          rootfs="full"
          rootfs_version="kali-2023.3b"
          break
          ;;
        8)
          rootfs="minimal"
          rootfs_version="kali-2023.3b"
          break
          ;;
        9)
          rootfs="nano"
          rootfs_version="kali-2023.3b"
          break
          ;;
        10)
          rootfs="full"
          rootfs_version="kali-2023.3"
          break
          ;;
        11)
          rootfs="minimal"
          rootfs_version="kali-2023.3"
          break
          ;;
        12)
          rootfs="nano"
          rootfs_version="kali-2023.3"
          break
          ;;
        13)
          rootfs="full"
          rootfs_version="current"
          break
          ;;
        14)
          rootfs="minimal"
          rootfs_version="current"
          break
          ;;
        15)
          rootfs="nano"
          rootfs_version="current"
          break
          ;;
        *) log red "Unknown option: $number" ;;
      esac
    done
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://kali.download/nethunter-images/$rootfs_version/rootfs/kalifs-$hardware_machine-$rootfs.tar.xz"
      if [ $? -ne 0 ]; then
        log red "Failed to download the Kali Linux Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "debian" ]; then
    echo "[1] Debian"
    echo "[2] Debian bullseye"
    echo "[3] Debian bookworm"

    while true; do
      printf "Enter a number: "
      read number
      case "$number" in
        1)
          rootfs="debian"
          break
          ;;
        2)
          rootfs="debian_bullseye"
          break
          ;;
        3)
          rootfs="debian_bookworm"
          break
          ;;
        *) log red "Unknown option: $number" ;;
      esac
    done
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ $rootfs = "debian" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Debian/$hardware_machine/debian-rootfs-$hardware_machine.tar.xz"
      elif [ $rootfs = "debian_bullseye" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.7.0/debian-bullseye-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.7.0.tar.xz"
      elif [ $rootfs = "debian_bookworm" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.7.0/debian-bookworm-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.7.0.tar.xz"
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Debian Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "parrot" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Parrot/$hardware_machine/parrot-rootfs-$hardware_machine.tar.xz"
      if [ $? -ne 0 ]; then
        log red "Failed to download the Parrot OS Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "archlinux" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "armhf" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://ca.us.mirror.archlinuxarm.org/os/ArchLinuxARM-armv7-latest.tar.gz"
      elif [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://ca.us.mirror.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz"
      elif [ "$hardware_machine" = "amd64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://mirrors.ocf.berkeley.edu/archlinux/iso/latest/archlinux-bootstrap-x86_64.tar.gz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Arch Linux Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "artix" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/artix-aarch64-pd-v4.6.0.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Artix Linux Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "deepin" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/artix-aarch64-pd-v4.6.0.tar.xz"
      elif [ "$hardware_machine" = "amd64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/artix-x86_64-pd-v4.6.0.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Deepin Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "fedora" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/fedora-aarch64-pd-v4.6.0.tar.xz"
      elif [ "$hardware_machine" = "amd64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/fedora-x86_64-pd-v4.6.0.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Fedora Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "openkylin" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/openkylin-aarch64-pd-v4.6.0.tar.xz"
      elif [ "$hardware_machine" = "amd64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/openkylin-x86_64-pd-v4.6.0.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the OpenKylin Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "manjaro" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/manjaro-aarch64-pd-v4.6.0.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Manjaro Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "opensuse" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/opensuse-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.6.0.tar.xz"
      if [ $? -ne 0 ]; then
        log red "Failed to download the OpenSuse Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "pardus" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" != "armhf" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/pardus-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.6.0.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Pardus Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "backbox" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/BackBox/$hardware_machine/backbox-rootfs-$hardware_machine.tar.xz"
      if [ $? -ne 0 ]; then
        log red "Failed to download the BackBox Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "centos" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS/arm64/centos-rootfs-arm64.tar.xz"
      elif [ "$hardware_machine" = "amd64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS/amd64/centos-rootfs-amd64.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the CentOS Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "centos_stream" ]; then
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$hardware_machine" = "arm64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS_Stream/arm64/centos_stream-rootfs-arm64.tar.xz"
      elif [ "$hardware_machine" = "amd64" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS_Stream/amd64/centos_stream-rootfs-amd64.tar.xz"
      else
        log red "Unsupported machine hardware: $1 $(uname -m)"
        exit
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the CentOS Stream Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi

  elif [ "$1" = "void" ]; then
    echo "[1] void linux 20210218"
    echo "[2] void linux 20210316"
    echo "[3] void linux 20210930"
    echo "[4] void linux 20221001"
    echo "[5] void linux 20230628"
    echo "[6] void linux current"

    while true; do
      printf "Enter a number: "
      read number
      case "$number" in
        1)
          rootfs="20210218"
          break
          ;;
        2)
          rootfs="20210316"
          break
          ;;
        3)
          rootfs="20210930"
          break
          ;;
        4)
          rootfs="20221001"
          break
          ;;
        5)
          rootfs="20230628"
          break
          ;;
        6)
          rootfs="current"
          break
          ;;
        *) log red "Unknown option: $number" ;;
      esac
    done
    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ "$rootfs" = "current" ]; then
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://repo-default.voidlinux.org/live/$rootfs/void-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/armv7l/g)-ROOTFS-20230628.tar.xz"
      else
        wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://repo-default.voidlinux.org/live/$rootfs/void-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/armv7l/g)-ROOTFS-$rootfs.tar.xz"
      fi
      if [ $? -ne 0 ]; then
        log red "Failed to download the Void Linux Rootfs"
        rm $chroot_distro_path/.rootfs/$1.tar.xz
        exit
      fi
    else
      log green "Already downloaded"
    fi
  else
    log red "Unavailable distro: $1"
  fi
}

chroot_distro_delete() {
  if chroot_distro_available $1; then
    if [ -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      rm $chroot_distro_path/.rootfs/$1.tar.xz
    else
      log yellow "$1 not downloaded"
      exit 1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

chroot_distro_install() {
  if chroot_distro_available $1; then
    if [ -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
      if [ ! -d "$chroot_distro_path/$1" ]; then
        distro_path=$chroot_distro_path/$1
        mkdir -p $distro_path
        if [ $(tar -tf $chroot_distro_path/.rootfs/"$1".tar.xz 2>/dev/null | grep -E '^.*\/$' | wc -l) -gt 2 ]; then
          tar -xf "$chroot_distro_path/.rootfs/$1.tar.xz" -C "$chroot_distro_path/$1/"
        else
          tar -xf "$chroot_distro_path/.rootfs/$1.tar.xz" -C "$chroot_distro_path/"
          mv "$chroot_distro_path/$(basename "$(tar -tf "$chroot_distro_path/.rootfs/$1.tar.xz" 2>/dev/null | head -n 1)")" "$chroot_distro_path/$1"
        fi

        mount --bind /dev $distro_path/dev
        mount --bind /sys $distro_path/sys
        mount --bind /proc $distro_path/proc
        mount --bind /dev/pts $distro_path/dev/pts
        mkdir -p $distro_path/sdcard
        mkdir -p $distro_path/system
        mkdir -p $distro_path/data
        mount --bind /sdcard $distro_path/sdcard
        mount --bind /system $distro_path/system
        mount --bind /data $distro_path/data
        echo "nameserver 8.8.8.8" >$distro_path/etc/resolv.conf
        echo "127.0.0.1 localhost" >$distro_path/etc/hosts
        chroot $distro_path /sbin/groupadd -g 3003 aid_inet 2>/dev/null
        chroot $distro_path /sbin/groupadd -g 3004 aid_net_raw 2>/dev/null
        chroot $distro_path /sbin/groupadd -g 1003 aid_graphics 2>/dev/null
        chroot $distro_path /sbin/usermod -g 3003 -G 3003,3004 -a _apt 2>/dev/null
        chroot $distro_path /sbin/usermod -G 3003 -a root 2>/dev/null
        chroot $distro_path /bin/ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 2>/dev/null
        chroot $distro_path /sbin/locale-gen en_US.UTF-8 2>/dev/null
        chroot $distro_path /bin/su - root
      else
        log yellow "$1 already installed"
        exit 1
      fi
    else
      log red "$1 not downloaded"
      exit 1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

chroot_distro_uninstall() {
  if chroot_distro_available $1; then
    if [ -d "$chroot_distro_path/$1" ]; then
      umount -lf $chroot_distro_path/$1/* >/dev/null 2>&1
      rm -rf $chroot_distro_path/$1
    else
      log yellow "$1 not installed"
      exit 1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

chroot_distro_backup() {
  if chroot_distro_available $1; then
    if [ "$2" = "" ]; then
      if [ -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
        tar -cvf $chroot_distro_path/.backup/$1.tar.xz $chroot_distro_path/$1
      else
        log yellow "Backup already exist, unbackup and try agin"
        exit 1
      fi
    else
      tar -cvf $2 $chroot_distro_path/$1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

chroot_distro_unbackup() {
  if chroot_distro_available $1; then
    if [ -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
      rm $chroot_distro_path/.backup/$1.tar.xz
    else
      log yellow "Backup not found $1"
      exit 1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

chroot_distro_restore() {
  if chroot_distro_available $1; then
    if [ ! -d "$chroot_distro_path/$1" ]; then
      if [ "$2" = "" ]; then
        if [ -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
          distro_path=$chroot_distro_path/$1
          mkdir -p $distro_path
          if [ $(tar -tf $chroot_distro_path/.backup/"$1".tar.xz 2>/dev/null | grep -E '^.*\/$' | wc -l) -gt 2 ]; then
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/$1/"
          else
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/"
            mv "$chroot_distro_path/$(basename "$(tar -tf "$chroot_distro_path/.backup/$1.tar.xz" 2>/dev/null | head -n 1)")" "$chroot_distro_path/$1"
          fi

          mount --bind /dev $distro_path/dev
          mount --bind /sys $distro_path/sys
          mount --bind /proc $distro_path/proc
          mount --bind /dev/pts $distro_path/dev/pts
          mkdir -p $distro_path/sdcard
          mkdir -p $distro_path/system
          mkdir -p $distro_path/data
          mount --bind /sdcard $distro_path/sdcard
          mount --bind /system $distro_path/system
          mount --bind /data $distro_path/data
          echo "nameserver 8.8.8.8" >$distro_path/etc/resolv.conf
          echo "127.0.0.1 localhost" >$distro_path/etc/hosts
          chroot $distro_path /sbin/groupadd -g 3003 aid_inet 2>/dev/null
          chroot $distro_path /sbin/groupadd -g 3004 aid_net_raw 2>/dev/null
          chroot $distro_path /sbin/groupadd -g 1003 aid_graphics 2>/dev/null
          chroot $distro_path /sbin/usermod -g 3003 -G 3003,3004 -a _apt 2>/dev/null
          chroot $distro_path /sbin/usermod -G 3003 -a root 2>/dev/null
          chroot $distro_path /bin/ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 2>/dev/null
          chroot $distro_path /sbin/locale-gen en_US.UTF-8 2>/dev/null
          chroot $distro_path /bin/su - root
        else
          log red "Backup not found"
          exit 1
        fi
      else
        if [ -f "$2" ]; then
          distro_path=$chroot_distro_path/$1
          mkdir -p $distro_path
          if [ $(tar -tf $chroot_distro_path/.backup/"$1".tar.xz 2>/dev/null | grep -E '^.*\/$' | wc -l) -gt 2 ]; then
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/$1/"
          else
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/"
            mv "$chroot_distro_path/$(basename "$(tar -tf "$chroot_distro_path/.backup/$1.tar.xz" 2>/dev/null | head -n 1)")" "$chroot_distro_path/$1"
          fi

          mount --bind /dev $distro_path/dev
          mount --bind /sys $distro_path/sys
          mount --bind /proc $distro_path/proc
          mount --bind /dev/pts $distro_path/dev/pts
          mkdir -p $distro_path/sdcard
          mkdir -p $distro_path/system
          mkdir -p $distro_path/data
          mount --bind /sdcard $distro_path/sdcard
          mount --bind /system $distro_path/system
          mount --bind /data $distro_path/data
          echo "nameserver 8.8.8.8" >$distro_path/etc/resolv.conf
          echo "127.0.0.1 localhost" >$distro_path/etc/hosts
          chroot $distro_path /sbin/groupadd -g 3003 aid_inet 2>/dev/null
          chroot $distro_path /sbin/groupadd -g 3004 aid_net_raw 2>/dev/null
          chroot $distro_path /sbin/groupadd -g 1003 aid_graphics 2>/dev/null
          chroot $distro_path /sbin/usermod -g 3003 -G 3003,3004 -a _apt 2>/dev/null
          chroot $distro_path /sbin/usermod -G 3003 -a root 2>/dev/null
          chroot $distro_path /bin/ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 2>/dev/null
          chroot $distro_path /sbin/locale-gen en_US.UTF-8 2>/dev/null
          chroot $distro_path /bin/su - root
        else
          log red "Backup not found"
          exit 1
        fi
      fi
    else
      log yellow "$1 distro already installed, uninstall and try again"
      exit 1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

chroot_distro_command() {
  if chroot_distro_available $1; then
    if [ -d "$chroot_distro_path/$1" ]; then
      mount --bind /dev $chroot_distro_path/$1/dev
      mount --bind /sys $chroot_distro_path/$1/sys
      mount --bind /proc $chroot_distro_path/$1/proc
      mount --bind /dev/pts $chroot_distro_path/$1/dev/pts
      mount --bind /sdcard $chroot_distro_path/$1/sdcard
      mount --bind /system $chroot_distro_path/$1/system
      mount --bind /data $chroot_distro_path/$1/data
      chroot $chroot_distro_path/$1/ /bin/$2
    else
      log red "$1 not installed"
      exit 1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

chroot_distro_login() {
  if chroot_distro_available $1; then
    if [ -d "$chroot_distro_path/$1" ]; then
      mount --bind /dev $chroot_distro_path/$1/dev
      mount --bind /sys $chroot_distro_path/$1/sys
      mount --bind /proc $chroot_distro_path/$1/proc
      mount --bind /dev/pts $chroot_distro_path/$1/dev/pts
      mount --bind /sdcard $chroot_distro_path/$1/sdcard
      mount --bind /system $chroot_distro_path/$1/system
      mount --bind /data $chroot_distro_path/$1/data
      chroot $chroot_distro_path/$1/ /bin/su - root
    else
      log red "$1 not installed"
      exit 1
    fi
  else
    log red "Unavailable distro $1"
    exit 1
  fi
}

case "$1" in
  list)
    chroot_distro_list
    ;;
  download)
    chroot_distro_download $2
    ;;
  delete)
    chroot_distro_delete $2
    ;;
  redownload)
    chroot_distro_delete $2
    chroot_distro_download $2
    ;;
  install)
    chroot_distro_install $2
    ;;
  uninstall)
    chroot_distro_uninstall $2
    ;;
  reinstall)
    chroot_distro_uninstall $2
    chroot_distro_install $2
    ;;
  backup)
    chroot_distro_backup $2 $3
    ;;
  unbackup)
    chroot_distro_unbackup $2
    ;;
  restore)
    chroot_distro_restore $2 $3
    ;;
  command)
    chroot_distro_command $2 $3
    ;;
  login)
    chroot_distro_login $2
    ;;
  help)
    chroot_distro_help
    ;;
  *)
    if [ "$1" = "" ]; then
      chroot_distro_help
    else
      log red "chroot-distro invalid option $1"
      log red "try 'chroot-distro help' for more information"
    fi
    ;;
esac
